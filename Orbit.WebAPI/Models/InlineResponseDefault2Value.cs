/*
 * CDS - GtmEntries
 *
 * CDS - GtmEntries
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace APIMDemo.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InlineResponseDefault2Value : IEquatable<InlineResponseDefault2Value>
    { 
        /// <summary>
        /// @odata.etag
        /// </summary>
        /// <value>@odata.etag</value>
        [DataMember(Name="@odata.etag")]
        public string OdataEtag { get; set; }

        /// <summary>
        /// _ownerid_value
        /// </summary>
        /// <value>_ownerid_value</value>
        [DataMember(Name="_ownerid_value")]
        public string OwneridValue { get; set; }

        /// <summary>
        /// _processid_value
        /// </summary>
        /// <value>_processid_value</value>
        [DataMember(Name="_processid_value")]
        public string ProcessidValue { get; set; }

        /// <summary>
        /// owningbusinessunit
        /// </summary>
        /// <value>owningbusinessunit</value>
        [DataMember(Name="owningbusinessunit")]
        public string Owningbusinessunit { get; set; }

        /// <summary>
        /// stagename
        /// </summary>
        /// <value>stagename</value>
        [DataMember(Name="stagename")]
        public string Stagename { get; set; }

        /// <summary>
        /// primaryentitytypecode
        /// </summary>
        /// <value>primaryentitytypecode</value>
        [DataMember(Name="primaryentitytypecode")]
        public string Primaryentitytypecode { get; set; }

        /// <summary>
        /// clientdata
        /// </summary>
        /// <value>clientdata</value>
        [DataMember(Name="clientdata")]
        public List<InlineResponseDefault2Clientdata> Clientdata { get; set; }

        /// <summary>
        /// processstageid
        /// </summary>
        /// <value>processstageid</value>
        [DataMember(Name="processstageid")]
        public string Processstageid { get; set; }

        /// <summary>
        /// stagecategory
        /// </summary>
        /// <value>stagecategory</value>
        [DataMember(Name="stagecategory")]
        public int? Stagecategory { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponseDefault2Value {\n");
            sb.Append("  OdataEtag: ").Append(OdataEtag).Append("\n");
            sb.Append("  OwneridValue: ").Append(OwneridValue).Append("\n");
            sb.Append("  ProcessidValue: ").Append(ProcessidValue).Append("\n");
            sb.Append("  Owningbusinessunit: ").Append(Owningbusinessunit).Append("\n");
            sb.Append("  Stagename: ").Append(Stagename).Append("\n");
            sb.Append("  Primaryentitytypecode: ").Append(Primaryentitytypecode).Append("\n");
            sb.Append("  Clientdata: ").Append(Clientdata).Append("\n");
            sb.Append("  Processstageid: ").Append(Processstageid).Append("\n");
            sb.Append("  Stagecategory: ").Append(Stagecategory).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InlineResponseDefault2Value)obj);
        }

        /// <summary>
        /// Returns true if InlineResponseDefault2Value instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponseDefault2Value to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponseDefault2Value other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    OdataEtag == other.OdataEtag ||
                    OdataEtag != null &&
                    OdataEtag.Equals(other.OdataEtag)
                ) && 
                (
                    OwneridValue == other.OwneridValue ||
                    OwneridValue != null &&
                    OwneridValue.Equals(other.OwneridValue)
                ) && 
                (
                    ProcessidValue == other.ProcessidValue ||
                    ProcessidValue != null &&
                    ProcessidValue.Equals(other.ProcessidValue)
                ) && 
                (
                    Owningbusinessunit == other.Owningbusinessunit ||
                    Owningbusinessunit != null &&
                    Owningbusinessunit.Equals(other.Owningbusinessunit)
                ) && 
                (
                    Stagename == other.Stagename ||
                    Stagename != null &&
                    Stagename.Equals(other.Stagename)
                ) && 
                (
                    Primaryentitytypecode == other.Primaryentitytypecode ||
                    Primaryentitytypecode != null &&
                    Primaryentitytypecode.Equals(other.Primaryentitytypecode)
                ) && 
                (
                    Clientdata == other.Clientdata ||
                    Clientdata != null &&
                    Clientdata.SequenceEqual(other.Clientdata)
                ) && 
                (
                    Processstageid == other.Processstageid ||
                    Processstageid != null &&
                    Processstageid.Equals(other.Processstageid)
                ) && 
                (
                    Stagecategory == other.Stagecategory ||
                    Stagecategory != null &&
                    Stagecategory.Equals(other.Stagecategory)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (OdataEtag != null)
                    hashCode = hashCode * 59 + OdataEtag.GetHashCode();
                    if (OwneridValue != null)
                    hashCode = hashCode * 59 + OwneridValue.GetHashCode();
                    if (ProcessidValue != null)
                    hashCode = hashCode * 59 + ProcessidValue.GetHashCode();
                    if (Owningbusinessunit != null)
                    hashCode = hashCode * 59 + Owningbusinessunit.GetHashCode();
                    if (Stagename != null)
                    hashCode = hashCode * 59 + Stagename.GetHashCode();
                    if (Primaryentitytypecode != null)
                    hashCode = hashCode * 59 + Primaryentitytypecode.GetHashCode();
                    if (Clientdata != null)
                    hashCode = hashCode * 59 + Clientdata.GetHashCode();
                    if (Processstageid != null)
                    hashCode = hashCode * 59 + Processstageid.GetHashCode();
                    if (Stagecategory != null)
                    hashCode = hashCode * 59 + Stagecategory.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InlineResponseDefault2Value left, InlineResponseDefault2Value right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InlineResponseDefault2Value left, InlineResponseDefault2Value right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
